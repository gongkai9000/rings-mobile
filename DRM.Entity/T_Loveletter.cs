//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class T_Loveletter: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int LoveletterID
        {
            get { return _loveletterID; }
            set
            {
                if (_loveletterID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“LoveletterID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _loveletterID = value;
                    OnPropertyChanged("LoveletterID");
                }
            }
        }
        private int _loveletterID;
    
        [DataMember]
        public Nullable<int> LoveletterUserId
        {
            get { return _loveletterUserId; }
            set
            {
                if (_loveletterUserId != value)
                {
                    _loveletterUserId = value;
                    OnPropertyChanged("LoveletterUserId");
                }
            }
        }
        private Nullable<int> _loveletterUserId;
    
        [DataMember]
        public string LoveletterImage
        {
            get { return _loveletterImage; }
            set
            {
                if (_loveletterImage != value)
                {
                    _loveletterImage = value;
                    OnPropertyChanged("LoveletterImage");
                }
            }
        }
        private string _loveletterImage;
    
        [DataMember]
        public string LoveletterName
        {
            get { return _loveletterName; }
            set
            {
                if (_loveletterName != value)
                {
                    _loveletterName = value;
                    OnPropertyChanged("LoveletterName");
                }
            }
        }
        private string _loveletterName;
    
        [DataMember]
        public string LoveletterOne
        {
            get { return _loveletterOne; }
            set
            {
                if (_loveletterOne != value)
                {
                    _loveletterOne = value;
                    OnPropertyChanged("LoveletterOne");
                }
            }
        }
        private string _loveletterOne;
    
        [DataMember]
        public string LoveletterTwo
        {
            get { return _loveletterTwo; }
            set
            {
                if (_loveletterTwo != value)
                {
                    _loveletterTwo = value;
                    OnPropertyChanged("LoveletterTwo");
                }
            }
        }
        private string _loveletterTwo;
    
        [DataMember]
        public string LoveletterThree
        {
            get { return _loveletterThree; }
            set
            {
                if (_loveletterThree != value)
                {
                    _loveletterThree = value;
                    OnPropertyChanged("LoveletterThree");
                }
            }
        }
        private string _loveletterThree;
    
        [DataMember]
        public Nullable<System.DateTime> LoveletterDate
        {
            get { return _loveletterDate; }
            set
            {
                if (_loveletterDate != value)
                {
                    _loveletterDate = value;
                    OnPropertyChanged("LoveletterDate");
                }
            }
        }
        private Nullable<System.DateTime> _loveletterDate;
    
        [DataMember]
        public int LoveletterRandom
        {
            get { return _loveletterRandom; }
            set
            {
                if (_loveletterRandom != value)
                {
                    _loveletterRandom = value;
                    OnPropertyChanged("LoveletterRandom");
                }
            }
        }
        private int _loveletterRandom;
    
        [DataMember]
        public int LoveletterZan
        {
            get { return _loveletterZan; }
            set
            {
                if (_loveletterZan != value)
                {
                    _loveletterZan = value;
                    OnPropertyChanged("LoveletterZan");
                }
            }
        }
        private int _loveletterZan;
    
        [DataMember]
        public int LoveletterZhuan
        {
            get { return _loveletterZhuan; }
            set
            {
                if (_loveletterZhuan != value)
                {
                    _loveletterZhuan = value;
                    OnPropertyChanged("LoveletterZhuan");
                }
            }
        }
        private int _loveletterZhuan;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
