//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class T_SpAddress: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int SpAddressId
        {
            get { return _spAddressId; }
            set
            {
                if (_spAddressId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“SpAddressId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _spAddressId = value;
                    OnPropertyChanged("SpAddressId");
                }
            }
        }
        private int _spAddressId;
    
        [DataMember]
        public string SpAddressCity
        {
            get { return _spAddressCity; }
            set
            {
                if (_spAddressCity != value)
                {
                    _spAddressCity = value;
                    OnPropertyChanged("SpAddressCity");
                }
            }
        }
        private string _spAddressCity;
    
        [DataMember]
        public string SpAddressStreet
        {
            get { return _spAddressStreet; }
            set
            {
                if (_spAddressStreet != value)
                {
                    _spAddressStreet = value;
                    OnPropertyChanged("SpAddressStreet");
                }
            }
        }
        private string _spAddressStreet;
    
        [DataMember]
        public string SpAddressCode
        {
            get { return _spAddressCode; }
            set
            {
                if (_spAddressCode != value)
                {
                    _spAddressCode = value;
                    OnPropertyChanged("SpAddressCode");
                }
            }
        }
        private string _spAddressCode;
    
        [DataMember]
        public string SpAddressName
        {
            get { return _spAddressName; }
            set
            {
                if (_spAddressName != value)
                {
                    _spAddressName = value;
                    OnPropertyChanged("SpAddressName");
                }
            }
        }
        private string _spAddressName;
    
        [DataMember]
        public string SpAddressPhone
        {
            get { return _spAddressPhone; }
            set
            {
                if (_spAddressPhone != value)
                {
                    _spAddressPhone = value;
                    OnPropertyChanged("SpAddressPhone");
                }
            }
        }
        private string _spAddressPhone;
    
        [DataMember]
        public string SpAddressMobile
        {
            get { return _spAddressMobile; }
            set
            {
                if (_spAddressMobile != value)
                {
                    _spAddressMobile = value;
                    OnPropertyChanged("SpAddressMobile");
                }
            }
        }
        private string _spAddressMobile;
    
        [DataMember]
        public string SpAddressGName
        {
            get { return _spAddressGName; }
            set
            {
                if (_spAddressGName != value)
                {
                    _spAddressGName = value;
                    OnPropertyChanged("SpAddressGName");
                }
            }
        }
        private string _spAddressGName;
    
        [DataMember]
        public string SpAddressGMobile
        {
            get { return _spAddressGMobile; }
            set
            {
                if (_spAddressGMobile != value)
                {
                    _spAddressGMobile = value;
                    OnPropertyChanged("SpAddressGMobile");
                }
            }
        }
        private string _spAddressGMobile;
    
        [DataMember]
        public string SpAddressGCard
        {
            get { return _spAddressGCard; }
            set
            {
                if (_spAddressGCard != value)
                {
                    _spAddressGCard = value;
                    OnPropertyChanged("SpAddressGCard");
                }
            }
        }
        private string _spAddressGCard;
    
        [DataMember]
        public string SpAddressGGirlfriend
        {
            get { return _spAddressGGirlfriend; }
            set
            {
                if (_spAddressGGirlfriend != value)
                {
                    _spAddressGGirlfriend = value;
                    OnPropertyChanged("SpAddressGGirlfriend");
                }
            }
        }
        private string _spAddressGGirlfriend;
    
        [DataMember]
        public string SpAddressSMSMobile
        {
            get { return _spAddressSMSMobile; }
            set
            {
                if (_spAddressSMSMobile != value)
                {
                    _spAddressSMSMobile = value;
                    OnPropertyChanged("SpAddressSMSMobile");
                }
            }
        }
        private string _spAddressSMSMobile;
    
        [DataMember]
        public bool SpAddressDefault
        {
            get { return _spAddressDefault; }
            set
            {
                if (_spAddressDefault != value)
                {
                    _spAddressDefault = value;
                    OnPropertyChanged("SpAddressDefault");
                }
            }
        }
        private bool _spAddressDefault;
    
        [DataMember]
        public Nullable<int> MemberId
        {
            get { return _memberId; }
            set
            {
                if (_memberId != value)
                {
                    _memberId = value;
                    OnPropertyChanged("MemberId");
                }
            }
        }
        private Nullable<int> _memberId;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
