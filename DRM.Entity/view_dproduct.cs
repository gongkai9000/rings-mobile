//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_dproduct: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int BasePID
        {
            get { return _basePID; }
            set
            {
                if (_basePID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“BasePID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _basePID = value;
                    OnPropertyChanged("BasePID");
                }
            }
        }
        private int _basePID;
    
        [DataMember]
        public Nullable<int> DiamondId
        {
            get { return _diamondId; }
            set
            {
                if (_diamondId != value)
                {
                    _diamondId = value;
                    OnPropertyChanged("DiamondId");
                }
            }
        }
        private Nullable<int> _diamondId;
    
        [DataMember]
        public Nullable<decimal> DiamondPrice
        {
            get { return _diamondPrice; }
            set
            {
                if (_diamondPrice != value)
                {
                    _diamondPrice = value;
                    OnPropertyChanged("DiamondPrice");
                }
            }
        }
        private Nullable<decimal> _diamondPrice;
    
        [DataMember]
        public Nullable<double> zct
        {
            get { return _zct; }
            set
            {
                if (_zct != value)
                {
                    _zct = value;
                    OnPropertyChanged("zct");
                }
            }
        }
        private Nullable<double> _zct;
    
        [DataMember]
        public string zclarity
        {
            get { return _zclarity; }
            set
            {
                if (_zclarity != value)
                {
                    _zclarity = value;
                    OnPropertyChanged("zclarity");
                }
            }
        }
        private string _zclarity;
    
        [DataMember]
        public string zcolor
        {
            get { return _zcolor; }
            set
            {
                if (_zcolor != value)
                {
                    _zcolor = value;
                    OnPropertyChanged("zcolor");
                }
            }
        }
        private string _zcolor;
    
        [DataMember]
        public string zpolish
        {
            get { return _zpolish; }
            set
            {
                if (_zpolish != value)
                {
                    _zpolish = value;
                    OnPropertyChanged("zpolish");
                }
            }
        }
        private string _zpolish;
    
        [DataMember]
        public string zsymm
        {
            get { return _zsymm; }
            set
            {
                if (_zsymm != value)
                {
                    _zsymm = value;
                    OnPropertyChanged("zsymm");
                }
            }
        }
        private string _zsymm;
    
        [DataMember]
        public string zfluo
        {
            get { return _zfluo; }
            set
            {
                if (_zfluo != value)
                {
                    _zfluo = value;
                    OnPropertyChanged("zfluo");
                }
            }
        }
        private string _zfluo;
    
        [DataMember]
        public string zcut
        {
            get { return _zcut; }
            set
            {
                if (_zcut != value)
                {
                    _zcut = value;
                    OnPropertyChanged("zcut");
                }
            }
        }
        private string _zcut;
    
        [DataMember]
        public Nullable<decimal> MemberPrice
        {
            get { return _memberPrice; }
            set
            {
                if (_memberPrice != value)
                {
                    _memberPrice = value;
                    OnPropertyChanged("MemberPrice");
                }
            }
        }
        private Nullable<decimal> _memberPrice;
    
        [DataMember]
        public Nullable<int> GroupDPID
        {
            get { return _groupDPID; }
            set
            {
                if (_groupDPID != value)
                {
                    _groupDPID = value;
                    OnPropertyChanged("GroupDPID");
                }
            }
        }
        private Nullable<int> _groupDPID;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
