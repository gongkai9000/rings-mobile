//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_mOrder: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<decimal> ordertotal
        {
            get { return _ordertotal; }
            set
            {
                if (_ordertotal != value)
                {
                    _ordertotal = value;
                    OnPropertyChanged("ordertotal");
                }
            }
        }
        private Nullable<decimal> _ordertotal;
    
        [DataMember]
        public string orderid
        {
            get { return _orderid; }
            set
            {
                if (_orderid != value)
                {
                    _orderid = value;
                    OnPropertyChanged("orderid");
                }
            }
        }
        private string _orderid;
    
        [DataMember]
        public int status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“status”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public Nullable<int> userid
        {
            get { return _userid; }
            set
            {
                if (_userid != value)
                {
                    _userid = value;
                    OnPropertyChanged("userid");
                }
            }
        }
        private Nullable<int> _userid;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public Nullable<System.DateTime> addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private Nullable<System.DateTime> _addtime;
    
        [DataMember]
        public string deliverytime
        {
            get { return _deliverytime; }
            set
            {
                if (_deliverytime != value)
                {
                    _deliverytime = value;
                    OnPropertyChanged("deliverytime");
                }
            }
        }
        private string _deliverytime;
    
        [DataMember]
        public Nullable<System.DateTime> latetime
        {
            get { return _latetime; }
            set
            {
                if (_latetime != value)
                {
                    _latetime = value;
                    OnPropertyChanged("latetime");
                }
            }
        }
        private Nullable<System.DateTime> _latetime;
    
        [DataMember]
        public Nullable<int> ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private Nullable<int> _productId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string memberprice
        {
            get { return _memberprice; }
            set
            {
                if (_memberprice != value)
                {
                    _memberprice = value;
                    OnPropertyChanged("memberprice");
                }
            }
        }
        private string _memberprice;
    
        [DataMember]
        public Nullable<int> productTypeId
        {
            get { return _productTypeId; }
            set
            {
                if (_productTypeId != value)
                {
                    _productTypeId = value;
                    OnPropertyChanged("productTypeId");
                }
            }
        }
        private Nullable<int> _productTypeId;
    
        [DataMember]
        public string productNo
        {
            get { return _productNo; }
            set
            {
                if (_productNo != value)
                {
                    _productNo = value;
                    OnPropertyChanged("productNo");
                }
            }
        }
        private string _productNo;
    
        [DataMember]
        public int odcount
        {
            get { return _odcount; }
            set
            {
                if (_odcount != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“odcount”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _odcount = value;
                    OnPropertyChanged("odcount");
                }
            }
        }
        private int _odcount;
    
        [DataMember]
        public string imgurl
        {
            get { return _imgurl; }
            set
            {
                if (_imgurl != value)
                {
                    _imgurl = value;
                    OnPropertyChanged("imgurl");
                }
            }
        }
        private string _imgurl;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
