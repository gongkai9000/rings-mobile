//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(T_photoReply))]
    [KnownType(typeof(T_memPhoto))]
    public partial class T_memAlbum: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int album_id
        {
            get { return _album_id; }
            set
            {
                if (_album_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“album_id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _album_id = value;
                    OnPropertyChanged("album_id");
                }
            }
        }
        private int _album_id;
    
        [DataMember]
        public string album_name
        {
            get { return _album_name; }
            set
            {
                if (_album_name != value)
                {
                    _album_name = value;
                    OnPropertyChanged("album_name");
                }
            }
        }
        private string _album_name;
    
        [DataMember]
        public string album_desc
        {
            get { return _album_desc; }
            set
            {
                if (_album_desc != value)
                {
                    _album_desc = value;
                    OnPropertyChanged("album_desc");
                }
            }
        }
        private string _album_desc;
    
        [DataMember]
        public Nullable<int> album_num
        {
            get { return _album_num; }
            set
            {
                if (_album_num != value)
                {
                    _album_num = value;
                    OnPropertyChanged("album_num");
                }
            }
        }
        private Nullable<int> _album_num;
    
        [DataMember]
        public string album_pic
        {
            get { return _album_pic; }
            set
            {
                if (_album_pic != value)
                {
                    _album_pic = value;
                    OnPropertyChanged("album_pic");
                }
            }
        }
        private string _album_pic;
    
        [DataMember]
        public Nullable<System.DateTime> album_time
        {
            get { return _album_time; }
            set
            {
                if (_album_time != value)
                {
                    _album_time = value;
                    OnPropertyChanged("album_time");
                }
            }
        }
        private Nullable<System.DateTime> _album_time;
    
        [DataMember]
        public Nullable<int> is_show
        {
            get { return _is_show; }
            set
            {
                if (_is_show != value)
                {
                    _is_show = value;
                    OnPropertyChanged("is_show");
                }
            }
        }
        private Nullable<int> _is_show;
    
        [DataMember]
        public Nullable<int> reply_count
        {
            get { return _reply_count; }
            set
            {
                if (_reply_count != value)
                {
                    _reply_count = value;
                    OnPropertyChanged("reply_count");
                }
            }
        }
        private Nullable<int> _reply_count;
    
        [DataMember]
        public Nullable<int> mem_id
        {
            get { return _mem_id; }
            set
            {
                if (_mem_id != value)
                {
                    _mem_id = value;
                    OnPropertyChanged("mem_id");
                }
            }
        }
        private Nullable<int> _mem_id;

        #endregion

        #region 导航属性
    
        [DataMember]
        public TrackableCollection<T_photoReply> T_photoReply
        {
            get
            {
                if (_t_photoReply == null)
                {
                    _t_photoReply = new TrackableCollection<T_photoReply>();
                    _t_photoReply.CollectionChanged += FixupT_photoReply;
                }
                return _t_photoReply;
            }
            set
            {
                if (!ReferenceEquals(_t_photoReply, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_t_photoReply != null)
                    {
                        _t_photoReply.CollectionChanged -= FixupT_photoReply;
                    }
                    _t_photoReply = value;
                    if (_t_photoReply != null)
                    {
                        _t_photoReply.CollectionChanged += FixupT_photoReply;
                    }
                    OnNavigationPropertyChanged("T_photoReply");
                }
            }
        }
        private TrackableCollection<T_photoReply> _t_photoReply;
    
        [DataMember]
        public TrackableCollection<T_memPhoto> T_memPhoto
        {
            get
            {
                if (_t_memPhoto == null)
                {
                    _t_memPhoto = new TrackableCollection<T_memPhoto>();
                    _t_memPhoto.CollectionChanged += FixupT_memPhoto;
                }
                return _t_memPhoto;
            }
            set
            {
                if (!ReferenceEquals(_t_memPhoto, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_t_memPhoto != null)
                    {
                        _t_memPhoto.CollectionChanged -= FixupT_memPhoto;
                    }
                    _t_memPhoto = value;
                    if (_t_memPhoto != null)
                    {
                        _t_memPhoto.CollectionChanged += FixupT_memPhoto;
                    }
                    OnNavigationPropertyChanged("T_memPhoto");
                }
            }
        }
        private TrackableCollection<T_memPhoto> _t_memPhoto;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            T_photoReply.Clear();
            T_memPhoto.Clear();
        }

        #endregion

        #region 关联修复
    
        private void FixupT_photoReply(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (T_photoReply item in e.NewItems)
                {
                    item.T_memAlbum = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("T_photoReply", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (T_photoReply item in e.OldItems)
                {
                    if (ReferenceEquals(item.T_memAlbum, this))
                    {
                        item.T_memAlbum = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("T_photoReply", item);
                    }
                }
            }
        }
    
        private void FixupT_memPhoto(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (T_memPhoto item in e.NewItems)
                {
                    item.T_memAlbum = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("T_memPhoto", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (T_memPhoto item in e.OldItems)
                {
                    if (ReferenceEquals(item.T_memAlbum, this))
                    {
                        item.T_memAlbum = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("T_memPhoto", item);
                    }
                }
            }
        }

        #endregion

    }
}
