//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_orderdiamond: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public Nullable<int> diamondId
        {
            get { return _diamondId; }
            set
            {
                if (_diamondId != value)
                {
                    _diamondId = value;
                    OnPropertyChanged("diamondId");
                }
            }
        }
        private Nullable<int> _diamondId;
    
        [DataMember]
        public Nullable<int> fdiamondId
        {
            get { return _fdiamondId; }
            set
            {
                if (_fdiamondId != value)
                {
                    _fdiamondId = value;
                    OnPropertyChanged("fdiamondId");
                }
            }
        }
        private Nullable<int> _fdiamondId;
    
        [DataMember]
        public Nullable<int> ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private Nullable<int> _productId;
    
        [DataMember]
        public Nullable<decimal> zprice
        {
            get { return _zprice; }
            set
            {
                if (_zprice != value)
                {
                    _zprice = value;
                    OnPropertyChanged("zprice");
                }
            }
        }
        private Nullable<decimal> _zprice;
    
        [DataMember]
        public Nullable<double> zct
        {
            get { return _zct; }
            set
            {
                if (_zct != value)
                {
                    _zct = value;
                    OnPropertyChanged("zct");
                }
            }
        }
        private Nullable<double> _zct;
    
        [DataMember]
        public string zclarity
        {
            get { return _zclarity; }
            set
            {
                if (_zclarity != value)
                {
                    _zclarity = value;
                    OnPropertyChanged("zclarity");
                }
            }
        }
        private string _zclarity;
    
        [DataMember]
        public string zcolor
        {
            get { return _zcolor; }
            set
            {
                if (_zcolor != value)
                {
                    _zcolor = value;
                    OnPropertyChanged("zcolor");
                }
            }
        }
        private string _zcolor;
    
        [DataMember]
        public string zcut
        {
            get { return _zcut; }
            set
            {
                if (_zcut != value)
                {
                    _zcut = value;
                    OnPropertyChanged("zcut");
                }
            }
        }
        private string _zcut;
    
        [DataMember]
        public Nullable<decimal> fprice
        {
            get { return _fprice; }
            set
            {
                if (_fprice != value)
                {
                    _fprice = value;
                    OnPropertyChanged("fprice");
                }
            }
        }
        private Nullable<decimal> _fprice;
    
        [DataMember]
        public Nullable<double> fct
        {
            get { return _fct; }
            set
            {
                if (_fct != value)
                {
                    _fct = value;
                    OnPropertyChanged("fct");
                }
            }
        }
        private Nullable<double> _fct;
    
        [DataMember]
        public string fcolor
        {
            get { return _fcolor; }
            set
            {
                if (_fcolor != value)
                {
                    _fcolor = value;
                    OnPropertyChanged("fcolor");
                }
            }
        }
        private string _fcolor;
    
        [DataMember]
        public string fcut
        {
            get { return _fcut; }
            set
            {
                if (_fcut != value)
                {
                    _fcut = value;
                    OnPropertyChanged("fcut");
                }
            }
        }
        private string _fcut;
    
        [DataMember]
        public string fclarity
        {
            get { return _fclarity; }
            set
            {
                if (_fclarity != value)
                {
                    _fclarity = value;
                    OnPropertyChanged("fclarity");
                }
            }
        }
        private string _fclarity;
    
        [DataMember]
        public Nullable<int> znumber
        {
            get { return _znumber; }
            set
            {
                if (_znumber != value)
                {
                    _znumber = value;
                    OnPropertyChanged("znumber");
                }
            }
        }
        private Nullable<int> _znumber;
    
        [DataMember]
        public Nullable<int> fnumber
        {
            get { return _fnumber; }
            set
            {
                if (_fnumber != value)
                {
                    _fnumber = value;
                    OnPropertyChanged("fnumber");
                }
            }
        }
        private Nullable<int> _fnumber;
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string orderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    _orderId = value;
                    OnPropertyChanged("orderId");
                }
            }
        }
        private string _orderId;
    
        [DataMember]
        public string zpolish
        {
            get { return _zpolish; }
            set
            {
                if (_zpolish != value)
                {
                    _zpolish = value;
                    OnPropertyChanged("zpolish");
                }
            }
        }
        private string _zpolish;
    
        [DataMember]
        public string zsymmetry
        {
            get { return _zsymmetry; }
            set
            {
                if (_zsymmetry != value)
                {
                    _zsymmetry = value;
                    OnPropertyChanged("zsymmetry");
                }
            }
        }
        private string _zsymmetry;
    
        [DataMember]
        public string zfluo
        {
            get { return _zfluo; }
            set
            {
                if (_zfluo != value)
                {
                    _zfluo = value;
                    OnPropertyChanged("zfluo");
                }
            }
        }
        private string _zfluo;
    
        [DataMember]
        public string fpolish
        {
            get { return _fpolish; }
            set
            {
                if (_fpolish != value)
                {
                    _fpolish = value;
                    OnPropertyChanged("fpolish");
                }
            }
        }
        private string _fpolish;
    
        [DataMember]
        public string fsymmetry
        {
            get { return _fsymmetry; }
            set
            {
                if (_fsymmetry != value)
                {
                    _fsymmetry = value;
                    OnPropertyChanged("fsymmetry");
                }
            }
        }
        private string _fsymmetry;
    
        [DataMember]
        public string ffluo
        {
            get { return _ffluo; }
            set
            {
                if (_ffluo != value)
                {
                    _ffluo = value;
                    OnPropertyChanged("ffluo");
                }
            }
        }
        private string _ffluo;
    
        [DataMember]
        public Nullable<int> zptid
        {
            get { return _zptid; }
            set
            {
                if (_zptid != value)
                {
                    _zptid = value;
                    OnPropertyChanged("zptid");
                }
            }
        }
        private Nullable<int> _zptid;
    
        [DataMember]
        public Nullable<int> fptid
        {
            get { return _fptid; }
            set
            {
                if (_fptid != value)
                {
                    _fptid = value;
                    OnPropertyChanged("fptid");
                }
            }
        }
        private Nullable<int> _fptid;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
