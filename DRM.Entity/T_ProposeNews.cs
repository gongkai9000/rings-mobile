//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class T_ProposeNews: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ProposeNewsId
        {
            get { return _proposeNewsId; }
            set
            {
                if (_proposeNewsId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ProposeNewsId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _proposeNewsId = value;
                    OnPropertyChanged("ProposeNewsId");
                }
            }
        }
        private int _proposeNewsId;
    
        [DataMember]
        public Nullable<int> ProposeNewsClassId
        {
            get { return _proposeNewsClassId; }
            set
            {
                if (_proposeNewsClassId != value)
                {
                    _proposeNewsClassId = value;
                    OnPropertyChanged("ProposeNewsClassId");
                }
            }
        }
        private Nullable<int> _proposeNewsClassId;
    
        [DataMember]
        public string ProposeNewsTitle
        {
            get { return _proposeNewsTitle; }
            set
            {
                if (_proposeNewsTitle != value)
                {
                    _proposeNewsTitle = value;
                    OnPropertyChanged("ProposeNewsTitle");
                }
            }
        }
        private string _proposeNewsTitle;
    
        [DataMember]
        public string ProposeNewsContent
        {
            get { return _proposeNewsContent; }
            set
            {
                if (_proposeNewsContent != value)
                {
                    _proposeNewsContent = value;
                    OnPropertyChanged("ProposeNewsContent");
                }
            }
        }
        private string _proposeNewsContent;
    
        [DataMember]
        public string ProposeNewsVideo
        {
            get { return _proposeNewsVideo; }
            set
            {
                if (_proposeNewsVideo != value)
                {
                    _proposeNewsVideo = value;
                    OnPropertyChanged("ProposeNewsVideo");
                }
            }
        }
        private string _proposeNewsVideo;
    
        [DataMember]
        public Nullable<bool> ProposeNewsHot
        {
            get { return _proposeNewsHot; }
            set
            {
                if (_proposeNewsHot != value)
                {
                    _proposeNewsHot = value;
                    OnPropertyChanged("ProposeNewsHot");
                }
            }
        }
        private Nullable<bool> _proposeNewsHot;
    
        [DataMember]
        public Nullable<int> ProposeNewsSort
        {
            get { return _proposeNewsSort; }
            set
            {
                if (_proposeNewsSort != value)
                {
                    _proposeNewsSort = value;
                    OnPropertyChanged("ProposeNewsSort");
                }
            }
        }
        private Nullable<int> _proposeNewsSort;
    
        [DataMember]
        public Nullable<System.DateTime> ProposeNewsAddtime
        {
            get { return _proposeNewsAddtime; }
            set
            {
                if (_proposeNewsAddtime != value)
                {
                    _proposeNewsAddtime = value;
                    OnPropertyChanged("ProposeNewsAddtime");
                }
            }
        }
        private Nullable<System.DateTime> _proposeNewsAddtime;
    
        [DataMember]
        public Nullable<int> ProposeNewsClick
        {
            get { return _proposeNewsClick; }
            set
            {
                if (_proposeNewsClick != value)
                {
                    _proposeNewsClick = value;
                    OnPropertyChanged("ProposeNewsClick");
                }
            }
        }
        private Nullable<int> _proposeNewsClick;
    
        [DataMember]
        public string keywords
        {
            get { return _keywords; }
            set
            {
                if (_keywords != value)
                {
                    _keywords = value;
                    OnPropertyChanged("keywords");
                }
            }
        }
        private string _keywords;
    
        [DataMember]
        public string desciption
        {
            get { return _desciption; }
            set
            {
                if (_desciption != value)
                {
                    _desciption = value;
                    OnPropertyChanged("desciption");
                }
            }
        }
        private string _desciption;
    
        [DataMember]
        public string source
        {
            get { return _source; }
            set
            {
                if (_source != value)
                {
                    _source = value;
                    OnPropertyChanged("source");
                }
            }
        }
        private string _source;
    
        [DataMember]
        public Nullable<int> recomId
        {
            get { return _recomId; }
            set
            {
                if (_recomId != value)
                {
                    _recomId = value;
                    OnPropertyChanged("recomId");
                }
            }
        }
        private Nullable<int> _recomId;
    
        [DataMember]
        public string tagwords
        {
            get { return _tagwords; }
            set
            {
                if (_tagwords != value)
                {
                    _tagwords = value;
                    OnPropertyChanged("tagwords");
                }
            }
        }
        private string _tagwords;
    
        [DataMember]
        public Nullable<int> articleType
        {
            get { return _articleType; }
            set
            {
                if (_articleType != value)
                {
                    _articleType = value;
                    OnPropertyChanged("articleType");
                }
            }
        }
        private Nullable<int> _articleType;
    
        [DataMember]
        public string newsurl
        {
            get { return _newsurl; }
            set
            {
                if (_newsurl != value)
                {
                    _newsurl = value;
                    OnPropertyChanged("newsurl");
                }
            }
        }
        private string _newsurl;
    
        [DataMember]
        public string smallPic
        {
            get { return _smallPic; }
            set
            {
                if (_smallPic != value)
                {
                    _smallPic = value;
                    OnPropertyChanged("smallPic");
                }
            }
        }
        private string _smallPic;
    
        [DataMember]
        public Nullable<int> attribute
        {
            get { return _attribute; }
            set
            {
                if (_attribute != value)
                {
                    _attribute = value;
                    OnPropertyChanged("attribute");
                }
            }
        }
        private Nullable<int> _attribute;
    
        [DataMember]
        public Nullable<int> userid
        {
            get { return _userid; }
            set
            {
                if (_userid != value)
                {
                    _userid = value;
                    OnPropertyChanged("userid");
                }
            }
        }
        private Nullable<int> _userid;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
