//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_cart: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> MemberId
        {
            get { return _memberId; }
            set
            {
                if (_memberId != value)
                {
                    _memberId = value;
                    OnPropertyChanged("MemberId");
                }
            }
        }
        private Nullable<int> _memberId;
    
        [DataMember]
        public string CookieId
        {
            get { return _cookieId; }
            set
            {
                if (_cookieId != value)
                {
                    _cookieId = value;
                    OnPropertyChanged("CookieId");
                }
            }
        }
        private string _cookieId;
    
        [DataMember]
        public Nullable<int> ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private Nullable<int> _productId;
    
        [DataMember]
        public Nullable<int> DiamondId
        {
            get { return _diamondId; }
            set
            {
                if (_diamondId != value)
                {
                    _diamondId = value;
                    OnPropertyChanged("DiamondId");
                }
            }
        }
        private Nullable<int> _diamondId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string ProductImg
        {
            get { return _productImg; }
            set
            {
                if (_productImg != value)
                {
                    _productImg = value;
                    OnPropertyChanged("ProductImg");
                }
            }
        }
        private string _productImg;
    
        [DataMember]
        public Nullable<decimal> MemberPrice
        {
            get { return _memberPrice; }
            set
            {
                if (_memberPrice != value)
                {
                    _memberPrice = value;
                    OnPropertyChanged("MemberPrice");
                }
            }
        }
        private Nullable<decimal> _memberPrice;
    
        [DataMember]
        public Nullable<decimal> DiamondPrice
        {
            get { return _diamondPrice; }
            set
            {
                if (_diamondPrice != value)
                {
                    _diamondPrice = value;
                    OnPropertyChanged("DiamondPrice");
                }
            }
        }
        private Nullable<decimal> _diamondPrice;
    
        [DataMember]
        public Nullable<int> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<int> _quantity;
    
        [DataMember]
        public Nullable<decimal> Sum
        {
            get { return _sum; }
            set
            {
                if (_sum != value)
                {
                    _sum = value;
                    OnPropertyChanged("Sum");
                }
            }
        }
        private Nullable<decimal> _sum;
    
        [DataMember]
        public Nullable<decimal> SumMember
        {
            get { return _sumMember; }
            set
            {
                if (_sumMember != value)
                {
                    _sumMember = value;
                    OnPropertyChanged("SumMember");
                }
            }
        }
        private Nullable<decimal> _sumMember;
    
        [DataMember]
        public string type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("type");
                }
            }
        }
        private string _type;
    
        [DataMember]
        public string Material
        {
            get { return _material; }
            set
            {
                if (_material != value)
                {
                    _material = value;
                    OnPropertyChanged("Material");
                }
            }
        }
        private string _material;
    
        [DataMember]
        public string handsize
        {
            get { return _handsize; }
            set
            {
                if (_handsize != value)
                {
                    _handsize = value;
                    OnPropertyChanged("handsize");
                }
            }
        }
        private string _handsize;
    
        [DataMember]
        public string fontstyle
        {
            get { return _fontstyle; }
            set
            {
                if (_fontstyle != value)
                {
                    _fontstyle = value;
                    OnPropertyChanged("fontstyle");
                }
            }
        }
        private string _fontstyle;
    
        [DataMember]
        public Nullable<System.DateTime> addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private Nullable<System.DateTime> _addtime;
    
        [DataMember]
        public Nullable<int> fDiamondId
        {
            get { return _fDiamondId; }
            set
            {
                if (_fDiamondId != value)
                {
                    _fDiamondId = value;
                    OnPropertyChanged("fDiamondId");
                }
            }
        }
        private Nullable<int> _fDiamondId;
    
        [DataMember]
        public bool isNewWeb
        {
            get { return _isNewWeb; }
            set
            {
                if (_isNewWeb != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“isNewWeb”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _isNewWeb = value;
                    OnPropertyChanged("isNewWeb");
                }
            }
        }
        private bool _isNewWeb;
    
        [DataMember]
        public string sirName
        {
            get { return _sirName; }
            set
            {
                if (_sirName != value)
                {
                    _sirName = value;
                    OnPropertyChanged("sirName");
                }
            }
        }
        private string _sirName;
    
        [DataMember]
        public string sirCode
        {
            get { return _sirCode; }
            set
            {
                if (_sirCode != value)
                {
                    _sirCode = value;
                    OnPropertyChanged("sirCode");
                }
            }
        }
        private string _sirCode;
    
        [DataMember]
        public Nullable<int> appid
        {
            get { return _appid; }
            set
            {
                if (_appid != value)
                {
                    _appid = value;
                    OnPropertyChanged("appid");
                }
            }
        }
        private Nullable<int> _appid;
    
        [DataMember]
        public Nullable<double> carat
        {
            get { return _carat; }
            set
            {
                if (_carat != value)
                {
                    _carat = value;
                    OnPropertyChanged("carat");
                }
            }
        }
        private Nullable<double> _carat;
    
        [DataMember]
        public string clarity
        {
            get { return _clarity; }
            set
            {
                if (_clarity != value)
                {
                    _clarity = value;
                    OnPropertyChanged("clarity");
                }
            }
        }
        private string _clarity;
    
        [DataMember]
        public string color
        {
            get { return _color; }
            set
            {
                if (_color != value)
                {
                    _color = value;
                    OnPropertyChanged("color");
                }
            }
        }
        private string _color;
    
        [DataMember]
        public string polish
        {
            get { return _polish; }
            set
            {
                if (_polish != value)
                {
                    _polish = value;
                    OnPropertyChanged("polish");
                }
            }
        }
        private string _polish;
    
        [DataMember]
        public string cut
        {
            get { return _cut; }
            set
            {
                if (_cut != value)
                {
                    _cut = value;
                    OnPropertyChanged("cut");
                }
            }
        }
        private string _cut;
    
        [DataMember]
        public string symmetry
        {
            get { return _symmetry; }
            set
            {
                if (_symmetry != value)
                {
                    _symmetry = value;
                    OnPropertyChanged("symmetry");
                }
            }
        }
        private string _symmetry;
    
        [DataMember]
        public string productNo
        {
            get { return _productNo; }
            set
            {
                if (_productNo != value)
                {
                    _productNo = value;
                    OnPropertyChanged("productNo");
                }
            }
        }
        private string _productNo;
    
        [DataMember]
        public Nullable<int> productTypeId
        {
            get { return _productTypeId; }
            set
            {
                if (_productTypeId != value)
                {
                    _productTypeId = value;
                    OnPropertyChanged("productTypeId");
                }
            }
        }
        private Nullable<int> _productTypeId;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
