//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_User_Reception: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public string ReceptionOrder
        {
            get { return _receptionOrder; }
            set
            {
                if (_receptionOrder != value)
                {
                    _receptionOrder = value;
                    OnPropertyChanged("ReceptionOrder");
                }
            }
        }
        private string _receptionOrder;
    
        [DataMember]
        public string ReceptionType
        {
            get { return _receptionType; }
            set
            {
                if (_receptionType != value)
                {
                    _receptionType = value;
                    OnPropertyChanged("ReceptionType");
                }
            }
        }
        private string _receptionType;
    
        [DataMember]
        public string username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    OnPropertyChanged("username");
                }
            }
        }
        private string _username;
    
        [DataMember]
        public string ReceptionCon
        {
            get { return _receptionCon; }
            set
            {
                if (_receptionCon != value)
                {
                    _receptionCon = value;
                    OnPropertyChanged("ReceptionCon");
                }
            }
        }
        private string _receptionCon;
    
        [DataMember]
        public Nullable<int> ReceptionUser
        {
            get { return _receptionUser; }
            set
            {
                if (_receptionUser != value)
                {
                    _receptionUser = value;
                    OnPropertyChanged("ReceptionUser");
                }
            }
        }
        private Nullable<int> _receptionUser;
    
        [DataMember]
        public int ReceptionId
        {
            get { return _receptionId; }
            set
            {
                if (_receptionId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ReceptionId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _receptionId = value;
                    OnPropertyChanged("ReceptionId");
                }
            }
        }
        private int _receptionId;
    
        [DataMember]
        public System.DateTime ReceptionDate
        {
            get { return _receptionDate; }
            set
            {
                if (_receptionDate != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ReceptionDate”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _receptionDate = value;
                    OnPropertyChanged("ReceptionDate");
                }
            }
        }
        private System.DateTime _receptionDate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
