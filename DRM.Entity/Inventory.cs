//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Goods))]
    [KnownType(typeof(InventoryLog))]
    public partial class Inventory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int goodsId
        {
            get { return _goodsId; }
            set
            {
                if (_goodsId != value)
                {
                    ChangeTracker.RecordOriginalValue("goodsId", _goodsId);
                    if (!IsDeserializing)
                    {
                        if (Goods != null && Goods.id != value)
                        {
                            Goods = null;
                        }
                    }
                    _goodsId = value;
                    OnPropertyChanged("goodsId");
                }
            }
        }
        private int _goodsId;
    
        [DataMember]
        public Nullable<int> count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    OnPropertyChanged("count");
                }
            }
        }
        private Nullable<int> _count;
    
        [DataMember]
        public string stockcode
        {
            get { return _stockcode; }
            set
            {
                if (_stockcode != value)
                {
                    _stockcode = value;
                    OnPropertyChanged("stockcode");
                }
            }
        }
        private string _stockcode;
    
        [DataMember]
        public Nullable<int> storehouseId
        {
            get { return _storehouseId; }
            set
            {
                if (_storehouseId != value)
                {
                    _storehouseId = value;
                    OnPropertyChanged("storehouseId");
                }
            }
        }
        private Nullable<int> _storehouseId;
    
        [DataMember]
        public string create_by
        {
            get { return _create_by; }
            set
            {
                if (_create_by != value)
                {
                    _create_by = value;
                    OnPropertyChanged("create_by");
                }
            }
        }
        private string _create_by;
    
        [DataMember]
        public Nullable<System.DateTime> create_date
        {
            get { return _create_date; }
            set
            {
                if (_create_date != value)
                {
                    _create_date = value;
                    OnPropertyChanged("create_date");
                }
            }
        }
        private Nullable<System.DateTime> _create_date;
    
        [DataMember]
        public string modify_by
        {
            get { return _modify_by; }
            set
            {
                if (_modify_by != value)
                {
                    _modify_by = value;
                    OnPropertyChanged("modify_by");
                }
            }
        }
        private string _modify_by;
    
        [DataMember]
        public Nullable<System.DateTime> modify_date
        {
            get { return _modify_date; }
            set
            {
                if (_modify_date != value)
                {
                    _modify_date = value;
                    OnPropertyChanged("modify_date");
                }
            }
        }
        private Nullable<System.DateTime> _modify_date;
    
        [DataMember]
        public string GIA
        {
            get { return _gIA; }
            set
            {
                if (_gIA != value)
                {
                    _gIA = value;
                    OnPropertyChanged("GIA");
                }
            }
        }
        private string _gIA;

        #endregion

        #region 导航属性
    
        [DataMember]
        public Goods Goods
        {
            get { return _goods; }
            set
            {
                if (!ReferenceEquals(_goods, value))
                {
                    var previousValue = _goods;
                    _goods = value;
                    FixupGoods(previousValue);
                    OnNavigationPropertyChanged("Goods");
                }
            }
        }
        private Goods _goods;
    
        [DataMember]
        public TrackableCollection<InventoryLog> InventoryLog
        {
            get
            {
                if (_inventoryLog == null)
                {
                    _inventoryLog = new TrackableCollection<InventoryLog>();
                    _inventoryLog.CollectionChanged += FixupInventoryLog;
                }
                return _inventoryLog;
            }
            set
            {
                if (!ReferenceEquals(_inventoryLog, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_inventoryLog != null)
                    {
                        _inventoryLog.CollectionChanged -= FixupInventoryLog;
                    }
                    _inventoryLog = value;
                    if (_inventoryLog != null)
                    {
                        _inventoryLog.CollectionChanged += FixupInventoryLog;
                    }
                    OnNavigationPropertyChanged("InventoryLog");
                }
            }
        }
        private TrackableCollection<InventoryLog> _inventoryLog;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Goods = null;
            InventoryLog.Clear();
        }

        #endregion

        #region 关联修复
    
        private void FixupGoods(Goods previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Inventory.Contains(this))
            {
                previousValue.Inventory.Remove(this);
            }
    
            if (Goods != null)
            {
                if (!Goods.Inventory.Contains(this))
                {
                    Goods.Inventory.Add(this);
                }
    
                goodsId = Goods.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Goods")
                    && (ChangeTracker.OriginalValues["Goods"] == Goods))
                {
                    ChangeTracker.OriginalValues.Remove("Goods");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Goods", previousValue);
                }
                if (Goods != null && !Goods.ChangeTracker.ChangeTrackingEnabled)
                {
                    Goods.StartTracking();
                }
            }
        }
    
        private void FixupInventoryLog(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InventoryLog item in e.NewItems)
                {
                    item.Inventory = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InventoryLog", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InventoryLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.Inventory, this))
                    {
                        item.Inventory = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InventoryLog", item);
                    }
                }
            }
        }

        #endregion

    }
}
