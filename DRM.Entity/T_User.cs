//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class T_User: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int userid
        {
            get { return _userid; }
            set
            {
                if (_userid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“userid”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _userid = value;
                    OnPropertyChanged("userid");
                }
            }
        }
        private int _userid;
    
        [DataMember]
        public string username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    OnPropertyChanged("username");
                }
            }
        }
        private string _username;
    
        [DataMember]
        public string password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    OnPropertyChanged("password");
                }
            }
        }
        private string _password;
    
        [DataMember]
        public Nullable<int> logincount
        {
            get { return _logincount; }
            set
            {
                if (_logincount != value)
                {
                    _logincount = value;
                    OnPropertyChanged("logincount");
                }
            }
        }
        private Nullable<int> _logincount;
    
        [DataMember]
        public Nullable<System.DateTime> lastlogintime
        {
            get { return _lastlogintime; }
            set
            {
                if (_lastlogintime != value)
                {
                    _lastlogintime = value;
                    OnPropertyChanged("lastlogintime");
                }
            }
        }
        private Nullable<System.DateTime> _lastlogintime;
    
        [DataMember]
        public Nullable<int> islock
        {
            get { return _islock; }
            set
            {
                if (_islock != value)
                {
                    _islock = value;
                    OnPropertyChanged("islock");
                }
            }
        }
        private Nullable<int> _islock;
    
        [DataMember]
        public string module
        {
            get { return _module; }
            set
            {
                if (_module != value)
                {
                    _module = value;
                    OnPropertyChanged("module");
                }
            }
        }
        private string _module;
    
        [DataMember]
        public Nullable<System.DateTime> addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private Nullable<System.DateTime> _addtime;
    
        [DataMember]
        public string lastloginip
        {
            get { return _lastloginip; }
            set
            {
                if (_lastloginip != value)
                {
                    _lastloginip = value;
                    OnPropertyChanged("lastloginip");
                }
            }
        }
        private string _lastloginip;
    
        [DataMember]
        public Nullable<int> DepartId
        {
            get { return _departId; }
            set
            {
                if (_departId != value)
                {
                    _departId = value;
                    OnPropertyChanged("DepartId");
                }
            }
        }
        private Nullable<int> _departId;
    
        [DataMember]
        public string realname
        {
            get { return _realname; }
            set
            {
                if (_realname != value)
                {
                    _realname = value;
                    OnPropertyChanged("realname");
                }
            }
        }
        private string _realname;
    
        [DataMember]
        public string phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    _phone = value;
                    OnPropertyChanged("phone");
                }
            }
        }
        private string _phone;
    
        [DataMember]
        public Nullable<System.DateTime> pwddate
        {
            get { return _pwddate; }
            set
            {
                if (_pwddate != value)
                {
                    _pwddate = value;
                    OnPropertyChanged("pwddate");
                }
            }
        }
        private Nullable<System.DateTime> _pwddate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
