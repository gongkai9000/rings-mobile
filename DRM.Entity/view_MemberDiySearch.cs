//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_MemberDiySearch: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> MemberId
        {
            get { return _memberId; }
            set
            {
                if (_memberId != value)
                {
                    _memberId = value;
                    OnPropertyChanged("MemberId");
                }
            }
        }
        private Nullable<int> _memberId;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string realname
        {
            get { return _realname; }
            set
            {
                if (_realname != value)
                {
                    _realname = value;
                    OnPropertyChanged("realname");
                }
            }
        }
        private string _realname;
    
        [DataMember]
        public string address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string mobile
        {
            get { return _mobile; }
            set
            {
                if (_mobile != value)
                {
                    _mobile = value;
                    OnPropertyChanged("mobile");
                }
            }
        }
        private string _mobile;
    
        [DataMember]
        public string birthday
        {
            get { return _birthday; }
            set
            {
                if (_birthday != value)
                {
                    _birthday = value;
                    OnPropertyChanged("birthday");
                }
            }
        }
        private string _birthday;
    
        [DataMember]
        public string objbirthday
        {
            get { return _objbirthday; }
            set
            {
                if (_objbirthday != value)
                {
                    _objbirthday = value;
                    OnPropertyChanged("objbirthday");
                }
            }
        }
        private string _objbirthday;
    
        [DataMember]
        public string specialday
        {
            get { return _specialday; }
            set
            {
                if (_specialday != value)
                {
                    _specialday = value;
                    OnPropertyChanged("specialday");
                }
            }
        }
        private string _specialday;
    
        [DataMember]
        public string ringcode
        {
            get { return _ringcode; }
            set
            {
                if (_ringcode != value)
                {
                    _ringcode = value;
                    OnPropertyChanged("ringcode");
                }
            }
        }
        private string _ringcode;
    
        [DataMember]
        public string diamondcode
        {
            get { return _diamondcode; }
            set
            {
                if (_diamondcode != value)
                {
                    _diamondcode = value;
                    OnPropertyChanged("diamondcode");
                }
            }
        }
        private string _diamondcode;
    
        [DataMember]
        public string diydate
        {
            get { return _diydate; }
            set
            {
                if (_diydate != value)
                {
                    _diydate = value;
                    OnPropertyChanged("diydate");
                }
            }
        }
        private string _diydate;
    
        [DataMember]
        public string imgurl
        {
            get { return _imgurl; }
            set
            {
                if (_imgurl != value)
                {
                    _imgurl = value;
                    OnPropertyChanged("imgurl");
                }
            }
        }
        private string _imgurl;
    
        [DataMember]
        public string content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    OnPropertyChanged("content");
                }
            }
        }
        private string _content;
    
        [DataMember]
        public Nullable<System.DateTime> addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private Nullable<System.DateTime> _addtime;
    
        [DataMember]
        public string qq
        {
            get { return _qq; }
            set
            {
                if (_qq != value)
                {
                    _qq = value;
                    OnPropertyChanged("qq");
                }
            }
        }
        private string _qq;
    
        [DataMember]
        public string idcard
        {
            get { return _idcard; }
            set
            {
                if (_idcard != value)
                {
                    _idcard = value;
                    OnPropertyChanged("idcard");
                }
            }
        }
        private string _idcard;
    
        [DataMember]
        public string musicurl
        {
            get { return _musicurl; }
            set
            {
                if (_musicurl != value)
                {
                    _musicurl = value;
                    OnPropertyChanged("musicurl");
                }
            }
        }
        private string _musicurl;
    
        [DataMember]
        public string SheName
        {
            get { return _sheName; }
            set
            {
                if (_sheName != value)
                {
                    _sheName = value;
                    OnPropertyChanged("SheName");
                }
            }
        }
        private string _sheName;
    
        [DataMember]
        public int zan
        {
            get { return _zan; }
            set
            {
                if (_zan != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“zan”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _zan = value;
                    OnPropertyChanged("zan");
                }
            }
        }
        private int _zan;
    
        [DataMember]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    OnPropertyChanged("Username");
                }
            }
        }
        private string _username;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
