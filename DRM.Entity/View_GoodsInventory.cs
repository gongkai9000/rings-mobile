//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class View_GoodsInventory: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public Nullable<int> goodsTypeId
        {
            get { return _goodsTypeId; }
            set
            {
                if (_goodsTypeId != value)
                {
                    _goodsTypeId = value;
                    OnPropertyChanged("goodsTypeId");
                }
            }
        }
        private Nullable<int> _goodsTypeId;
    
        [DataMember]
        public string goodsType
        {
            get { return _goodsType; }
            set
            {
                if (_goodsType != value)
                {
                    _goodsType = value;
                    OnPropertyChanged("goodsType");
                }
            }
        }
        private string _goodsType;
    
        [DataMember]
        public string Property
        {
            get { return _property; }
            set
            {
                if (_property != value)
                {
                    _property = value;
                    OnPropertyChanged("Property");
                }
            }
        }
        private string _property;
    
        [DataMember]
        public string value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("value");
                }
            }
        }
        private string _value;
    
        [DataMember]
        public int goodsId
        {
            get { return _goodsId; }
            set
            {
                if (_goodsId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“goodsId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _goodsId = value;
                    OnPropertyChanged("goodsId");
                }
            }
        }
        private int _goodsId;
    
        [DataMember]
        public Nullable<int> count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    OnPropertyChanged("count");
                }
            }
        }
        private Nullable<int> _count;
    
        [DataMember]
        public string storehouse
        {
            get { return _storehouse; }
            set
            {
                if (_storehouse != value)
                {
                    _storehouse = value;
                    OnPropertyChanged("storehouse");
                }
            }
        }
        private string _storehouse;
    
        [DataMember]
        public string stockcode
        {
            get { return _stockcode; }
            set
            {
                if (_stockcode != value)
                {
                    _stockcode = value;
                    OnPropertyChanged("stockcode");
                }
            }
        }
        private string _stockcode;
    
        [DataMember]
        public string goodsNo
        {
            get { return _goodsNo; }
            set
            {
                if (_goodsNo != value)
                {
                    _goodsNo = value;
                    OnPropertyChanged("goodsNo");
                }
            }
        }
        private string _goodsNo;
    
        [DataMember]
        public string goodsName
        {
            get { return _goodsName; }
            set
            {
                if (_goodsName != value)
                {
                    _goodsName = value;
                    OnPropertyChanged("goodsName");
                }
            }
        }
        private string _goodsName;
    
        [DataMember]
        public Nullable<decimal> price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("price");
                }
            }
        }
        private Nullable<decimal> _price;
    
        [DataMember]
        public Nullable<int> storehouseId
        {
            get { return _storehouseId; }
            set
            {
                if (_storehouseId != value)
                {
                    _storehouseId = value;
                    OnPropertyChanged("storehouseId");
                }
            }
        }
        private Nullable<int> _storehouseId;
    
        [DataMember]
        public int inventoryId
        {
            get { return _inventoryId; }
            set
            {
                if (_inventoryId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“inventoryId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _inventoryId = value;
                    OnPropertyChanged("inventoryId");
                }
            }
        }
        private int _inventoryId;
    
        [DataMember]
        public string GIA
        {
            get { return _gIA; }
            set
            {
                if (_gIA != value)
                {
                    _gIA = value;
                    OnPropertyChanged("GIA");
                }
            }
        }
        private string _gIA;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
