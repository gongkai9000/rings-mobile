//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class T_Card: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int card_id
        {
            get { return _card_id; }
            set
            {
                if (_card_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“card_id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _card_id = value;
                    OnPropertyChanged("card_id");
                }
            }
        }
        private int _card_id;
    
        [DataMember]
        public Nullable<System.DateTime> marry_time
        {
            get { return _marry_time; }
            set
            {
                if (_marry_time != value)
                {
                    _marry_time = value;
                    OnPropertyChanged("marry_time");
                }
            }
        }
        private Nullable<System.DateTime> _marry_time;
    
        [DataMember]
        public string hotel_addr
        {
            get { return _hotel_addr; }
            set
            {
                if (_hotel_addr != value)
                {
                    _hotel_addr = value;
                    OnPropertyChanged("hotel_addr");
                }
            }
        }
        private string _hotel_addr;
    
        [DataMember]
        public Nullable<System.DateTime> hotel_time
        {
            get { return _hotel_time; }
            set
            {
                if (_hotel_time != value)
                {
                    _hotel_time = value;
                    OnPropertyChanged("hotel_time");
                }
            }
        }
        private Nullable<System.DateTime> _hotel_time;
    
        [DataMember]
        public string detail_addr
        {
            get { return _detail_addr; }
            set
            {
                if (_detail_addr != value)
                {
                    _detail_addr = value;
                    OnPropertyChanged("detail_addr");
                }
            }
        }
        private string _detail_addr;
    
        [DataMember]
        public Nullable<int> album_id
        {
            get { return _album_id; }
            set
            {
                if (_album_id != value)
                {
                    _album_id = value;
                    OnPropertyChanged("album_id");
                }
            }
        }
        private Nullable<int> _album_id;
    
        [DataMember]
        public Nullable<int> candy_num
        {
            get { return _candy_num; }
            set
            {
                if (_candy_num != value)
                {
                    _candy_num = value;
                    OnPropertyChanged("candy_num");
                }
            }
        }
        private Nullable<int> _candy_num;
    
        [DataMember]
        public Nullable<int> candy_sum
        {
            get { return _candy_sum; }
            set
            {
                if (_candy_sum != value)
                {
                    _candy_sum = value;
                    OnPropertyChanged("candy_sum");
                }
            }
        }
        private Nullable<int> _candy_sum;
    
        [DataMember]
        public Nullable<int> is_show
        {
            get { return _is_show; }
            set
            {
                if (_is_show != value)
                {
                    _is_show = value;
                    OnPropertyChanged("is_show");
                }
            }
        }
        private Nullable<int> _is_show;
    
        [DataMember]
        public string index_img
        {
            get { return _index_img; }
            set
            {
                if (_index_img != value)
                {
                    _index_img = value;
                    OnPropertyChanged("index_img");
                }
            }
        }
        private string _index_img;
    
        [DataMember]
        public Nullable<int> mem_id
        {
            get { return _mem_id; }
            set
            {
                if (_mem_id != value)
                {
                    _mem_id = value;
                    OnPropertyChanged("mem_id");
                }
            }
        }
        private Nullable<int> _mem_id;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
