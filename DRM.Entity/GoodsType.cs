//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Goods))]
    [KnownType(typeof(GoodsTypeProperty))]
    [KnownType(typeof(ProductGoodsRelationship))]
    public partial class GoodsType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;

        #endregion

        #region 导航属性
    
        [DataMember]
        public TrackableCollection<Goods> Goods
        {
            get
            {
                if (_goods == null)
                {
                    _goods = new TrackableCollection<Goods>();
                    _goods.CollectionChanged += FixupGoods;
                }
                return _goods;
            }
            set
            {
                if (!ReferenceEquals(_goods, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_goods != null)
                    {
                        _goods.CollectionChanged -= FixupGoods;
                    }
                    _goods = value;
                    if (_goods != null)
                    {
                        _goods.CollectionChanged += FixupGoods;
                    }
                    OnNavigationPropertyChanged("Goods");
                }
            }
        }
        private TrackableCollection<Goods> _goods;
    
        [DataMember]
        public TrackableCollection<GoodsTypeProperty> GoodsTypeProperty
        {
            get
            {
                if (_goodsTypeProperty == null)
                {
                    _goodsTypeProperty = new TrackableCollection<GoodsTypeProperty>();
                    _goodsTypeProperty.CollectionChanged += FixupGoodsTypeProperty;
                }
                return _goodsTypeProperty;
            }
            set
            {
                if (!ReferenceEquals(_goodsTypeProperty, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_goodsTypeProperty != null)
                    {
                        _goodsTypeProperty.CollectionChanged -= FixupGoodsTypeProperty;
                    }
                    _goodsTypeProperty = value;
                    if (_goodsTypeProperty != null)
                    {
                        _goodsTypeProperty.CollectionChanged += FixupGoodsTypeProperty;
                    }
                    OnNavigationPropertyChanged("GoodsTypeProperty");
                }
            }
        }
        private TrackableCollection<GoodsTypeProperty> _goodsTypeProperty;
    
        [DataMember]
        public TrackableCollection<ProductGoodsRelationship> ProductGoodsRelationship
        {
            get
            {
                if (_productGoodsRelationship == null)
                {
                    _productGoodsRelationship = new TrackableCollection<ProductGoodsRelationship>();
                    _productGoodsRelationship.CollectionChanged += FixupProductGoodsRelationship;
                }
                return _productGoodsRelationship;
            }
            set
            {
                if (!ReferenceEquals(_productGoodsRelationship, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_productGoodsRelationship != null)
                    {
                        _productGoodsRelationship.CollectionChanged -= FixupProductGoodsRelationship;
                    }
                    _productGoodsRelationship = value;
                    if (_productGoodsRelationship != null)
                    {
                        _productGoodsRelationship.CollectionChanged += FixupProductGoodsRelationship;
                    }
                    OnNavigationPropertyChanged("ProductGoodsRelationship");
                }
            }
        }
        private TrackableCollection<ProductGoodsRelationship> _productGoodsRelationship;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Goods.Clear();
            GoodsTypeProperty.Clear();
            ProductGoodsRelationship.Clear();
        }

        #endregion

        #region 关联修复
    
        private void FixupGoods(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Goods item in e.NewItems)
                {
                    item.GoodsType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Goods", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Goods item in e.OldItems)
                {
                    if (ReferenceEquals(item.GoodsType, this))
                    {
                        item.GoodsType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Goods", item);
                    }
                }
            }
        }
    
        private void FixupGoodsTypeProperty(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (GoodsTypeProperty item in e.NewItems)
                {
                    item.GoodsType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("GoodsTypeProperty", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GoodsTypeProperty item in e.OldItems)
                {
                    if (ReferenceEquals(item.GoodsType, this))
                    {
                        item.GoodsType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("GoodsTypeProperty", item);
                    }
                }
            }
        }
    
        private void FixupProductGoodsRelationship(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductGoodsRelationship item in e.NewItems)
                {
                    item.GoodsType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductGoodsRelationship", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductGoodsRelationship item in e.OldItems)
                {
                    if (ReferenceEquals(item.GoodsType, this))
                    {
                        item.GoodsType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductGoodsRelationship", item);
                    }
                }
            }
        }

        #endregion

    }
}
