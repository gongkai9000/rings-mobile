//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_MemberDarryHome: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int DarryHomeId
        {
            get { return _darryHomeId; }
            set
            {
                if (_darryHomeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“DarryHomeId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _darryHomeId = value;
                    OnPropertyChanged("DarryHomeId");
                }
            }
        }
        private int _darryHomeId;
    
        [DataMember]
        public Nullable<int> DarryHomeMemberId
        {
            get { return _darryHomeMemberId; }
            set
            {
                if (_darryHomeMemberId != value)
                {
                    _darryHomeMemberId = value;
                    OnPropertyChanged("DarryHomeMemberId");
                }
            }
        }
        private Nullable<int> _darryHomeMemberId;
    
        [DataMember]
        public string DarryHomeMemberName
        {
            get { return _darryHomeMemberName; }
            set
            {
                if (_darryHomeMemberName != value)
                {
                    _darryHomeMemberName = value;
                    OnPropertyChanged("DarryHomeMemberName");
                }
            }
        }
        private string _darryHomeMemberName;
    
        [DataMember]
        public string DarryHomeNationality
        {
            get { return _darryHomeNationality; }
            set
            {
                if (_darryHomeNationality != value)
                {
                    _darryHomeNationality = value;
                    OnPropertyChanged("DarryHomeNationality");
                }
            }
        }
        private string _darryHomeNationality;
    
        [DataMember]
        public string DarryHomeIDCard
        {
            get { return _darryHomeIDCard; }
            set
            {
                if (_darryHomeIDCard != value)
                {
                    _darryHomeIDCard = value;
                    OnPropertyChanged("DarryHomeIDCard");
                }
            }
        }
        private string _darryHomeIDCard;
    
        [DataMember]
        public string DarryHomeOrderId
        {
            get { return _darryHomeOrderId; }
            set
            {
                if (_darryHomeOrderId != value)
                {
                    _darryHomeOrderId = value;
                    OnPropertyChanged("DarryHomeOrderId");
                }
            }
        }
        private string _darryHomeOrderId;
    
        [DataMember]
        public bool DarryHomeIsBit
        {
            get { return _darryHomeIsBit; }
            set
            {
                if (_darryHomeIsBit != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“DarryHomeIsBit”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _darryHomeIsBit = value;
                    OnPropertyChanged("DarryHomeIsBit");
                }
            }
        }
        private bool _darryHomeIsBit;
    
        [DataMember]
        public Nullable<System.DateTime> DarryHomeDate
        {
            get { return _darryHomeDate; }
            set
            {
                if (_darryHomeDate != value)
                {
                    _darryHomeDate = value;
                    OnPropertyChanged("DarryHomeDate");
                }
            }
        }
        private Nullable<System.DateTime> _darryHomeDate;
    
        [DataMember]
        public string DarryHomeMemberTitle
        {
            get { return _darryHomeMemberTitle; }
            set
            {
                if (_darryHomeMemberTitle != value)
                {
                    _darryHomeMemberTitle = value;
                    OnPropertyChanged("DarryHomeMemberTitle");
                }
            }
        }
        private string _darryHomeMemberTitle;
    
        [DataMember]
        public string DarryHomeMsName
        {
            get { return _darryHomeMsName; }
            set
            {
                if (_darryHomeMsName != value)
                {
                    _darryHomeMsName = value;
                    OnPropertyChanged("DarryHomeMsName");
                }
            }
        }
        private string _darryHomeMsName;
    
        [DataMember]
        public string DarryHomeContent
        {
            get { return _darryHomeContent; }
            set
            {
                if (_darryHomeContent != value)
                {
                    _darryHomeContent = value;
                    OnPropertyChanged("DarryHomeContent");
                }
            }
        }
        private string _darryHomeContent;
    
        [DataMember]
        public string DarryHomeCode
        {
            get { return _darryHomeCode; }
            set
            {
                if (_darryHomeCode != value)
                {
                    _darryHomeCode = value;
                    OnPropertyChanged("DarryHomeCode");
                }
            }
        }
        private string _darryHomeCode;
    
        [DataMember]
        public string DarryHomePhoto
        {
            get { return _darryHomePhoto; }
            set
            {
                if (_darryHomePhoto != value)
                {
                    _darryHomePhoto = value;
                    OnPropertyChanged("DarryHomePhoto");
                }
            }
        }
        private string _darryHomePhoto;
    
        [DataMember]
        public string DarryHomeBgPhoto
        {
            get { return _darryHomeBgPhoto; }
            set
            {
                if (_darryHomeBgPhoto != value)
                {
                    _darryHomeBgPhoto = value;
                    OnPropertyChanged("DarryHomeBgPhoto");
                }
            }
        }
        private string _darryHomeBgPhoto;
    
        [DataMember]
        public string DarryHomeMusicUrl
        {
            get { return _darryHomeMusicUrl; }
            set
            {
                if (_darryHomeMusicUrl != value)
                {
                    _darryHomeMusicUrl = value;
                    OnPropertyChanged("DarryHomeMusicUrl");
                }
            }
        }
        private string _darryHomeMusicUrl;
    
        [DataMember]
        public string DarryHomeProductImg
        {
            get { return _darryHomeProductImg; }
            set
            {
                if (_darryHomeProductImg != value)
                {
                    _darryHomeProductImg = value;
                    OnPropertyChanged("DarryHomeProductImg");
                }
            }
        }
        private string _darryHomeProductImg;
    
        [DataMember]
        public string DarryHomeIDCardMd5
        {
            get { return _darryHomeIDCardMd5; }
            set
            {
                if (_darryHomeIDCardMd5 != value)
                {
                    _darryHomeIDCardMd5 = value;
                    OnPropertyChanged("DarryHomeIDCardMd5");
                }
            }
        }
        private string _darryHomeIDCardMd5;
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string nickname
        {
            get { return _nickname; }
            set
            {
                if (_nickname != value)
                {
                    _nickname = value;
                    OnPropertyChanged("nickname");
                }
            }
        }
        private string _nickname;
    
        [DataMember]
        public string userpwd
        {
            get { return _userpwd; }
            set
            {
                if (_userpwd != value)
                {
                    _userpwd = value;
                    OnPropertyChanged("userpwd");
                }
            }
        }
        private string _userpwd;
    
        [DataMember]
        public string realname
        {
            get { return _realname; }
            set
            {
                if (_realname != value)
                {
                    _realname = value;
                    OnPropertyChanged("realname");
                }
            }
        }
        private string _realname;
    
        [DataMember]
        public string address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string mobile
        {
            get { return _mobile; }
            set
            {
                if (_mobile != value)
                {
                    _mobile = value;
                    OnPropertyChanged("mobile");
                }
            }
        }
        private string _mobile;
    
        [DataMember]
        public string telephone
        {
            get { return _telephone; }
            set
            {
                if (_telephone != value)
                {
                    _telephone = value;
                    OnPropertyChanged("telephone");
                }
            }
        }
        private string _telephone;
    
        [DataMember]
        public string gender
        {
            get { return _gender; }
            set
            {
                if (_gender != value)
                {
                    _gender = value;
                    OnPropertyChanged("gender");
                }
            }
        }
        private string _gender;
    
        [DataMember]
        public string birthday
        {
            get { return _birthday; }
            set
            {
                if (_birthday != value)
                {
                    _birthday = value;
                    OnPropertyChanged("birthday");
                }
            }
        }
        private string _birthday;
    
        [DataMember]
        public Nullable<System.DateTime> addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private Nullable<System.DateTime> _addtime;
    
        [DataMember]
        public Nullable<int> logincount
        {
            get { return _logincount; }
            set
            {
                if (_logincount != value)
                {
                    _logincount = value;
                    OnPropertyChanged("logincount");
                }
            }
        }
        private Nullable<int> _logincount;
    
        [DataMember]
        public Nullable<System.DateTime> lastlogin
        {
            get { return _lastlogin; }
            set
            {
                if (_lastlogin != value)
                {
                    _lastlogin = value;
                    OnPropertyChanged("lastlogin");
                }
            }
        }
        private Nullable<System.DateTime> _lastlogin;
    
        [DataMember]
        public string regip
        {
            get { return _regip; }
            set
            {
                if (_regip != value)
                {
                    _regip = value;
                    OnPropertyChanged("regip");
                }
            }
        }
        private string _regip;
    
        [DataMember]
        public string lastip
        {
            get { return _lastip; }
            set
            {
                if (_lastip != value)
                {
                    _lastip = value;
                    OnPropertyChanged("lastip");
                }
            }
        }
        private string _lastip;
    
        [DataMember]
        public Nullable<int> loginlock
        {
            get { return _loginlock; }
            set
            {
                if (_loginlock != value)
                {
                    _loginlock = value;
                    OnPropertyChanged("loginlock");
                }
            }
        }
        private Nullable<int> _loginlock;
    
        [DataMember]
        public string qq
        {
            get { return _qq; }
            set
            {
                if (_qq != value)
                {
                    _qq = value;
                    OnPropertyChanged("qq");
                }
            }
        }
        private string _qq;
    
        [DataMember]
        public string postcode
        {
            get { return _postcode; }
            set
            {
                if (_postcode != value)
                {
                    _postcode = value;
                    OnPropertyChanged("postcode");
                }
            }
        }
        private string _postcode;
    
        [DataMember]
        public Nullable<int> typeid
        {
            get { return _typeid; }
            set
            {
                if (_typeid != value)
                {
                    _typeid = value;
                    OnPropertyChanged("typeid");
                }
            }
        }
        private Nullable<int> _typeid;
    
        [DataMember]
        public string IDCard
        {
            get { return _iDCard; }
            set
            {
                if (_iDCard != value)
                {
                    _iDCard = value;
                    OnPropertyChanged("IDCard");
                }
            }
        }
        private string _iDCard;
    
        [DataMember]
        public string QQOpenId
        {
            get { return _qQOpenId; }
            set
            {
                if (_qQOpenId != value)
                {
                    _qQOpenId = value;
                    OnPropertyChanged("QQOpenId");
                }
            }
        }
        private string _qQOpenId;
    
        [DataMember]
        public string SinaOpenId
        {
            get { return _sinaOpenId; }
            set
            {
                if (_sinaOpenId != value)
                {
                    _sinaOpenId = value;
                    OnPropertyChanged("SinaOpenId");
                }
            }
        }
        private string _sinaOpenId;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public Nullable<System.DateTime> resdate
        {
            get { return _resdate; }
            set
            {
                if (_resdate != value)
                {
                    _resdate = value;
                    OnPropertyChanged("resdate");
                }
            }
        }
        private Nullable<System.DateTime> _resdate;
    
        [DataMember]
        public string mate
        {
            get { return _mate; }
            set
            {
                if (_mate != value)
                {
                    _mate = value;
                    OnPropertyChanged("mate");
                }
            }
        }
        private string _mate;
    
        [DataMember]
        public string headimgurl
        {
            get { return _headimgurl; }
            set
            {
                if (_headimgurl != value)
                {
                    _headimgurl = value;
                    OnPropertyChanged("headimgurl");
                }
            }
        }
        private string _headimgurl;
    
        [DataMember]
        public Nullable<int> appid
        {
            get { return _appid; }
            set
            {
                if (_appid != value)
                {
                    _appid = value;
                    OnPropertyChanged("appid");
                }
            }
        }
        private Nullable<int> _appid;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
