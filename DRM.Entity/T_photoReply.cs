//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(T_memAlbum))]
    public partial class T_photoReply: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int reply_id
        {
            get { return _reply_id; }
            set
            {
                if (_reply_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“reply_id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _reply_id = value;
                    OnPropertyChanged("reply_id");
                }
            }
        }
        private int _reply_id;
    
        [DataMember]
        public Nullable<int> album_id
        {
            get { return _album_id; }
            set
            {
                if (_album_id != value)
                {
                    ChangeTracker.RecordOriginalValue("album_id", _album_id);
                    if (!IsDeserializing)
                    {
                        if (T_memAlbum != null && T_memAlbum.album_id != value)
                        {
                            T_memAlbum = null;
                        }
                    }
                    _album_id = value;
                    OnPropertyChanged("album_id");
                }
            }
        }
        private Nullable<int> _album_id;
    
        [DataMember]
        public string reply_text
        {
            get { return _reply_text; }
            set
            {
                if (_reply_text != value)
                {
                    _reply_text = value;
                    OnPropertyChanged("reply_text");
                }
            }
        }
        private string _reply_text;
    
        [DataMember]
        public string reply_state
        {
            get { return _reply_state; }
            set
            {
                if (_reply_state != value)
                {
                    _reply_state = value;
                    OnPropertyChanged("reply_state");
                }
            }
        }
        private string _reply_state;
    
        [DataMember]
        public Nullable<System.DateTime> reply_time
        {
            get { return _reply_time; }
            set
            {
                if (_reply_time != value)
                {
                    _reply_time = value;
                    OnPropertyChanged("reply_time");
                }
            }
        }
        private Nullable<System.DateTime> _reply_time;
    
        [DataMember]
        public Nullable<int> mem_id
        {
            get { return _mem_id; }
            set
            {
                if (_mem_id != value)
                {
                    _mem_id = value;
                    OnPropertyChanged("mem_id");
                }
            }
        }
        private Nullable<int> _mem_id;
    
        [DataMember]
        public string path_s
        {
            get { return _path_s; }
            set
            {
                if (_path_s != value)
                {
                    _path_s = value;
                    OnPropertyChanged("path_s");
                }
            }
        }
        private string _path_s;
    
        [DataMember]
        public Nullable<int> zhan
        {
            get { return _zhan; }
            set
            {
                if (_zhan != value)
                {
                    _zhan = value;
                    OnPropertyChanged("zhan");
                }
            }
        }
        private Nullable<int> _zhan;
    
        [DataMember]
        public Nullable<int> p_id
        {
            get { return _p_id; }
            set
            {
                if (_p_id != value)
                {
                    _p_id = value;
                    OnPropertyChanged("p_id");
                }
            }
        }
        private Nullable<int> _p_id;

        #endregion

        #region 导航属性
    
        [DataMember]
        public T_memAlbum T_memAlbum
        {
            get { return _t_memAlbum; }
            set
            {
                if (!ReferenceEquals(_t_memAlbum, value))
                {
                    var previousValue = _t_memAlbum;
                    _t_memAlbum = value;
                    FixupT_memAlbum(previousValue);
                    OnNavigationPropertyChanged("T_memAlbum");
                }
            }
        }
        private T_memAlbum _t_memAlbum;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            T_memAlbum = null;
        }

        #endregion

        #region 关联修复
    
        private void FixupT_memAlbum(T_memAlbum previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.T_photoReply.Contains(this))
            {
                previousValue.T_photoReply.Remove(this);
            }
    
            if (T_memAlbum != null)
            {
                if (!T_memAlbum.T_photoReply.Contains(this))
                {
                    T_memAlbum.T_photoReply.Add(this);
                }
    
                album_id = T_memAlbum.album_id;
            }
            else if (!skipKeys)
            {
                album_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("T_memAlbum")
                    && (ChangeTracker.OriginalValues["T_memAlbum"] == T_memAlbum))
                {
                    ChangeTracker.OriginalValues.Remove("T_memAlbum");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("T_memAlbum", previousValue);
                }
                if (T_memAlbum != null && !T_memAlbum.ChangeTracker.ChangeTrackingEnabled)
                {
                    T_memAlbum.StartTracking();
                }
            }
        }

        #endregion

    }
}
