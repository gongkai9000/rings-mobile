//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_orderdetail_product: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“Id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string orderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    _orderId = value;
                    OnPropertyChanged("orderId");
                }
            }
        }
        private string _orderId;
    
        [DataMember]
        public Nullable<int> ProductId
        {
            get { return _productId; }
            set
            {
                if (_productId != value)
                {
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private Nullable<int> _productId;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public Nullable<int> Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    _quantity = value;
                    OnPropertyChanged("Quantity");
                }
            }
        }
        private Nullable<int> _quantity;
    
        [DataMember]
        public Nullable<decimal> Price
        {
            get { return _price; }
            set
            {
                if (_price != value)
                {
                    _price = value;
                    OnPropertyChanged("Price");
                }
            }
        }
        private Nullable<decimal> _price;
    
        [DataMember]
        public string memberprice
        {
            get { return _memberprice; }
            set
            {
                if (_memberprice != value)
                {
                    _memberprice = value;
                    OnPropertyChanged("memberprice");
                }
            }
        }
        private string _memberprice;
    
        [DataMember]
        public string protype
        {
            get { return _protype; }
            set
            {
                if (_protype != value)
                {
                    _protype = value;
                    OnPropertyChanged("protype");
                }
            }
        }
        private string _protype;
    
        [DataMember]
        public string handsize
        {
            get { return _handsize; }
            set
            {
                if (_handsize != value)
                {
                    _handsize = value;
                    OnPropertyChanged("handsize");
                }
            }
        }
        private string _handsize;
    
        [DataMember]
        public string fontstyle
        {
            get { return _fontstyle; }
            set
            {
                if (_fontstyle != value)
                {
                    _fontstyle = value;
                    OnPropertyChanged("fontstyle");
                }
            }
        }
        private string _fontstyle;
    
        [DataMember]
        public string Material
        {
            get { return _material; }
            set
            {
                if (_material != value)
                {
                    _material = value;
                    OnPropertyChanged("Material");
                }
            }
        }
        private string _material;
    
        [DataMember]
        public string text_3
        {
            get { return _text_3; }
            set
            {
                if (_text_3 != value)
                {
                    _text_3 = value;
                    OnPropertyChanged("text_3");
                }
            }
        }
        private string _text_3;
    
        [DataMember]
        public string text_4
        {
            get { return _text_4; }
            set
            {
                if (_text_4 != value)
                {
                    _text_4 = value;
                    OnPropertyChanged("text_4");
                }
            }
        }
        private string _text_4;
    
        [DataMember]
        public string text_5
        {
            get { return _text_5; }
            set
            {
                if (_text_5 != value)
                {
                    _text_5 = value;
                    OnPropertyChanged("text_5");
                }
            }
        }
        private string _text_5;
    
        [DataMember]
        public string text_6
        {
            get { return _text_6; }
            set
            {
                if (_text_6 != value)
                {
                    _text_6 = value;
                    OnPropertyChanged("text_6");
                }
            }
        }
        private string _text_6;
    
        [DataMember]
        public string text_7
        {
            get { return _text_7; }
            set
            {
                if (_text_7 != value)
                {
                    _text_7 = value;
                    OnPropertyChanged("text_7");
                }
            }
        }
        private string _text_7;
    
        [DataMember]
        public string text_8
        {
            get { return _text_8; }
            set
            {
                if (_text_8 != value)
                {
                    _text_8 = value;
                    OnPropertyChanged("text_8");
                }
            }
        }
        private string _text_8;
    
        [DataMember]
        public string text_11
        {
            get { return _text_11; }
            set
            {
                if (_text_11 != value)
                {
                    _text_11 = value;
                    OnPropertyChanged("text_11");
                }
            }
        }
        private string _text_11;
    
        [DataMember]
        public string text_12
        {
            get { return _text_12; }
            set
            {
                if (_text_12 != value)
                {
                    _text_12 = value;
                    OnPropertyChanged("text_12");
                }
            }
        }
        private string _text_12;
    
        [DataMember]
        public string text_13
        {
            get { return _text_13; }
            set
            {
                if (_text_13 != value)
                {
                    _text_13 = value;
                    OnPropertyChanged("text_13");
                }
            }
        }
        private string _text_13;
    
        [DataMember]
        public string text_14
        {
            get { return _text_14; }
            set
            {
                if (_text_14 != value)
                {
                    _text_14 = value;
                    OnPropertyChanged("text_14");
                }
            }
        }
        private string _text_14;
    
        [DataMember]
        public string text_15
        {
            get { return _text_15; }
            set
            {
                if (_text_15 != value)
                {
                    _text_15 = value;
                    OnPropertyChanged("text_15");
                }
            }
        }
        private string _text_15;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
