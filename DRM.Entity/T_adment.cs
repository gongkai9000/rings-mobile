//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class T_adment: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string adTitle
        {
            get { return _adTitle; }
            set
            {
                if (_adTitle != value)
                {
                    _adTitle = value;
                    OnPropertyChanged("adTitle");
                }
            }
        }
        private string _adTitle;
    
        [DataMember]
        public Nullable<int> adimgId
        {
            get { return _adimgId; }
            set
            {
                if (_adimgId != value)
                {
                    _adimgId = value;
                    OnPropertyChanged("adimgId");
                }
            }
        }
        private Nullable<int> _adimgId;
    
        [DataMember]
        public string AdCode
        {
            get { return _adCode; }
            set
            {
                if (_adCode != value)
                {
                    _adCode = value;
                    OnPropertyChanged("AdCode");
                }
            }
        }
        private string _adCode;
    
        [DataMember]
        public Nullable<int> Category
        {
            get { return _category; }
            set
            {
                if (_category != value)
                {
                    _category = value;
                    OnPropertyChanged("Category");
                }
            }
        }
        private Nullable<int> _category;
    
        [DataMember]
        public string adType
        {
            get { return _adType; }
            set
            {
                if (_adType != value)
                {
                    _adType = value;
                    OnPropertyChanged("adType");
                }
            }
        }
        private string _adType;
    
        [DataMember]
        public Nullable<int> clickNum
        {
            get { return _clickNum; }
            set
            {
                if (_clickNum != value)
                {
                    _clickNum = value;
                    OnPropertyChanged("clickNum");
                }
            }
        }
        private Nullable<int> _clickNum;
    
        [DataMember]
        public Nullable<int> status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private Nullable<int> _status;
    
        [DataMember]
        public string mark
        {
            get { return _mark; }
            set
            {
                if (_mark != value)
                {
                    _mark = value;
                    OnPropertyChanged("mark");
                }
            }
        }
        private string _mark;
    
        [DataMember]
        public string createby
        {
            get { return _createby; }
            set
            {
                if (_createby != value)
                {
                    _createby = value;
                    OnPropertyChanged("createby");
                }
            }
        }
        private string _createby;
    
        [DataMember]
        public Nullable<System.DateTime> createDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("createDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public string modifyBy
        {
            get { return _modifyBy; }
            set
            {
                if (_modifyBy != value)
                {
                    _modifyBy = value;
                    OnPropertyChanged("modifyBy");
                }
            }
        }
        private string _modifyBy;
    
        [DataMember]
        public Nullable<System.DateTime> modifyDate
        {
            get { return _modifyDate; }
            set
            {
                if (_modifyDate != value)
                {
                    _modifyDate = value;
                    OnPropertyChanged("modifyDate");
                }
            }
        }
        private Nullable<System.DateTime> _modifyDate;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
