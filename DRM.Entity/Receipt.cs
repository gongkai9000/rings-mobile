//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class Receipt: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string serialNo
        {
            get { return _serialNo; }
            set
            {
                if (_serialNo != value)
                {
                    _serialNo = value;
                    OnPropertyChanged("serialNo");
                }
            }
        }
        private string _serialNo;
    
        [DataMember]
        public int action
        {
            get { return _action; }
            set
            {
                if (_action != value)
                {
                    _action = value;
                    OnPropertyChanged("action");
                }
            }
        }
        private int _action;
    
        [DataMember]
        public string storehouse
        {
            get { return _storehouse; }
            set
            {
                if (_storehouse != value)
                {
                    _storehouse = value;
                    OnPropertyChanged("storehouse");
                }
            }
        }
        private string _storehouse;
    
        [DataMember]
        public int storehouseId
        {
            get { return _storehouseId; }
            set
            {
                if (_storehouseId != value)
                {
                    _storehouseId = value;
                    OnPropertyChanged("storehouseId");
                }
            }
        }
        private int _storehouseId;
    
        [DataMember]
        public Nullable<int> goodsTypeId
        {
            get { return _goodsTypeId; }
            set
            {
                if (_goodsTypeId != value)
                {
                    _goodsTypeId = value;
                    OnPropertyChanged("goodsTypeId");
                }
            }
        }
        private Nullable<int> _goodsTypeId;
    
        [DataMember]
        public string goodsTypeName
        {
            get { return _goodsTypeName; }
            set
            {
                if (_goodsTypeName != value)
                {
                    _goodsTypeName = value;
                    OnPropertyChanged("goodsTypeName");
                }
            }
        }
        private string _goodsTypeName;
    
        [DataMember]
        public string goodsNo
        {
            get { return _goodsNo; }
            set
            {
                if (_goodsNo != value)
                {
                    _goodsNo = value;
                    OnPropertyChanged("goodsNo");
                }
            }
        }
        private string _goodsNo;
    
        [DataMember]
        public int goodsId
        {
            get { return _goodsId; }
            set
            {
                if (_goodsId != value)
                {
                    _goodsId = value;
                    OnPropertyChanged("goodsId");
                }
            }
        }
        private int _goodsId;
    
        [DataMember]
        public int count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    OnPropertyChanged("count");
                }
            }
        }
        private int _count;
    
        [DataMember]
        public string remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public System.DateTime addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private System.DateTime _addtime;
    
        [DataMember]
        public int addUserId
        {
            get { return _addUserId; }
            set
            {
                if (_addUserId != value)
                {
                    _addUserId = value;
                    OnPropertyChanged("addUserId");
                }
            }
        }
        private int _addUserId;
    
        [DataMember]
        public string addUserName
        {
            get { return _addUserName; }
            set
            {
                if (_addUserName != value)
                {
                    _addUserName = value;
                    OnPropertyChanged("addUserName");
                }
            }
        }
        private string _addUserName;
    
        [DataMember]
        public string addRealName
        {
            get { return _addRealName; }
            set
            {
                if (_addRealName != value)
                {
                    _addRealName = value;
                    OnPropertyChanged("addRealName");
                }
            }
        }
        private string _addRealName;
    
        [DataMember]
        public string GIA
        {
            get { return _gIA; }
            set
            {
                if (_gIA != value)
                {
                    _gIA = value;
                    OnPropertyChanged("GIA");
                }
            }
        }
        private string _gIA;
    
        [DataMember]
        public string supplier
        {
            get { return _supplier; }
            set
            {
                if (_supplier != value)
                {
                    _supplier = value;
                    OnPropertyChanged("supplier");
                }
            }
        }
        private string _supplier;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
