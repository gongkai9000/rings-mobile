//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    public partial class view_myfavorites: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string myParms
        {
            get { return _myParms; }
            set
            {
                if (_myParms != value)
                {
                    _myParms = value;
                    OnPropertyChanged("myParms");
                }
            }
        }
        private string _myParms;
    
        [DataMember]
        public int memberid
        {
            get { return _memberid; }
            set
            {
                if (_memberid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“memberid”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _memberid = value;
                    OnPropertyChanged("memberid");
                }
            }
        }
        private int _memberid;
    
        [DataMember]
        public int pid
        {
            get { return _pid; }
            set
            {
                if (_pid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“pid”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _pid = value;
                    OnPropertyChanged("pid");
                }
            }
        }
        private int _pid;
    
        [DataMember]
        public Nullable<System.DateTime> addtime
        {
            get { return _addtime; }
            set
            {
                if (_addtime != value)
                {
                    _addtime = value;
                    OnPropertyChanged("addtime");
                }
            }
        }
        private Nullable<System.DateTime> _addtime;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string nickname
        {
            get { return _nickname; }
            set
            {
                if (_nickname != value)
                {
                    _nickname = value;
                    OnPropertyChanged("nickname");
                }
            }
        }
        private string _nickname;
    
        [DataMember]
        public string realname
        {
            get { return _realname; }
            set
            {
                if (_realname != value)
                {
                    _realname = value;
                    OnPropertyChanged("realname");
                }
            }
        }
        private string _realname;
    
        [DataMember]
        public string productNo
        {
            get { return _productNo; }
            set
            {
                if (_productNo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“productNo”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _productNo = value;
                    OnPropertyChanged("productNo");
                }
            }
        }
        private string _productNo;
    
        [DataMember]
        public int productTypeId
        {
            get { return _productTypeId; }
            set
            {
                if (_productTypeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“productTypeId”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _productTypeId = value;
                    OnPropertyChanged("productTypeId");
                }
            }
        }
        private int _productTypeId;
    
        [DataMember]
        public string title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“title”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _title = value;
                    OnPropertyChanged("title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public Nullable<decimal> MemberPrice
        {
            get { return _memberPrice; }
            set
            {
                if (_memberPrice != value)
                {
                    _memberPrice = value;
                    OnPropertyChanged("MemberPrice");
                }
            }
        }
        private Nullable<decimal> _memberPrice;
    
        [DataMember]
        public Nullable<double> zct
        {
            get { return _zct; }
            set
            {
                if (_zct != value)
                {
                    _zct = value;
                    OnPropertyChanged("zct");
                }
            }
        }
        private Nullable<double> _zct;
    
        [DataMember]
        public Nullable<int> znumber
        {
            get { return _znumber; }
            set
            {
                if (_znumber != value)
                {
                    _znumber = value;
                    OnPropertyChanged("znumber");
                }
            }
        }
        private Nullable<int> _znumber;
    
        [DataMember]
        public string zclarity
        {
            get { return _zclarity; }
            set
            {
                if (_zclarity != value)
                {
                    _zclarity = value;
                    OnPropertyChanged("zclarity");
                }
            }
        }
        private string _zclarity;
    
        [DataMember]
        public string zcolor
        {
            get { return _zcolor; }
            set
            {
                if (_zcolor != value)
                {
                    _zcolor = value;
                    OnPropertyChanged("zcolor");
                }
            }
        }
        private string _zcolor;
    
        [DataMember]
        public string zcut
        {
            get { return _zcut; }
            set
            {
                if (_zcut != value)
                {
                    _zcut = value;
                    OnPropertyChanged("zcut");
                }
            }
        }
        private string _zcut;
    
        [DataMember]
        public string Material
        {
            get { return _material; }
            set
            {
                if (_material != value)
                {
                    _material = value;
                    OnPropertyChanged("Material");
                }
            }
        }
        private string _material;
    
        [DataMember]
        public string HandInch
        {
            get { return _handInch; }
            set
            {
                if (_handInch != value)
                {
                    _handInch = value;
                    OnPropertyChanged("HandInch");
                }
            }
        }
        private string _handInch;
    
        [DataMember]
        public string kuanshi
        {
            get { return _kuanshi; }
            set
            {
                if (_kuanshi != value)
                {
                    _kuanshi = value;
                    OnPropertyChanged("kuanshi");
                }
            }
        }
        private string _kuanshi;
    
        [DataMember]
        public string imgurl
        {
            get { return _imgurl; }
            set
            {
                if (_imgurl != value)
                {
                    _imgurl = value;
                    OnPropertyChanged("imgurl");
                }
            }
        }
        private string _imgurl;
    
        [DataMember]
        public Nullable<int> commentCount
        {
            get { return _commentCount; }
            set
            {
                if (_commentCount != value)
                {
                    _commentCount = value;
                    OnPropertyChanged("commentCount");
                }
            }
        }
        private Nullable<int> _commentCount;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
