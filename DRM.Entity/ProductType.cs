//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DRM.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Product))]
    [KnownType(typeof(ProductGoodsRelationship))]
    [KnownType(typeof(ProductType))]
    public partial class ProductType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“id”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    if (!IsDeserializing)
                    {
                        if (ProductType2 != null && ProductType2.id != value)
                        {
                            ProductType2 = null;
                        }
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public Nullable<int> parentID
        {
            get { return _parentID; }
            set
            {
                if (_parentID != value)
                {
                    _parentID = value;
                    OnPropertyChanged("parentID");
                }
            }
        }
        private Nullable<int> _parentID;
    
        [DataMember]
        public string imgurl
        {
            get { return _imgurl; }
            set
            {
                if (_imgurl != value)
                {
                    _imgurl = value;
                    OnPropertyChanged("imgurl");
                }
            }
        }
        private string _imgurl;
    
        [DataMember]
        public string desc
        {
            get { return _desc; }
            set
            {
                if (_desc != value)
                {
                    _desc = value;
                    OnPropertyChanged("desc");
                }
            }
        }
        private string _desc;
    
        [DataMember]
        public string purl
        {
            get { return _purl; }
            set
            {
                if (_purl != value)
                {
                    _purl = value;
                    OnPropertyChanged("purl");
                }
            }
        }
        private string _purl;
    
        [DataMember]
        public string surl
        {
            get { return _surl; }
            set
            {
                if (_surl != value)
                {
                    _surl = value;
                    OnPropertyChanged("surl");
                }
            }
        }
        private string _surl;

        #endregion

        #region 导航属性
    
        [DataMember]
        public TrackableCollection<Product> Product
        {
            get
            {
                if (_product == null)
                {
                    _product = new TrackableCollection<Product>();
                    _product.CollectionChanged += FixupProduct;
                }
                return _product;
            }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_product != null)
                    {
                        _product.CollectionChanged -= FixupProduct;
                    }
                    _product = value;
                    if (_product != null)
                    {
                        _product.CollectionChanged += FixupProduct;
                    }
                    OnNavigationPropertyChanged("Product");
                }
            }
        }
        private TrackableCollection<Product> _product;
    
        [DataMember]
        public TrackableCollection<ProductGoodsRelationship> ProductGoodsRelationship
        {
            get
            {
                if (_productGoodsRelationship == null)
                {
                    _productGoodsRelationship = new TrackableCollection<ProductGoodsRelationship>();
                    _productGoodsRelationship.CollectionChanged += FixupProductGoodsRelationship;
                }
                return _productGoodsRelationship;
            }
            set
            {
                if (!ReferenceEquals(_productGoodsRelationship, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_productGoodsRelationship != null)
                    {
                        _productGoodsRelationship.CollectionChanged -= FixupProductGoodsRelationship;
                    }
                    _productGoodsRelationship = value;
                    if (_productGoodsRelationship != null)
                    {
                        _productGoodsRelationship.CollectionChanged += FixupProductGoodsRelationship;
                    }
                    OnNavigationPropertyChanged("ProductGoodsRelationship");
                }
            }
        }
        private TrackableCollection<ProductGoodsRelationship> _productGoodsRelationship;
    
        [DataMember]
        public ProductType ProductType1
        {
            get { return _productType1; }
            set
            {
                if (!ReferenceEquals(_productType1, value))
                {
                    var previousValue = _productType1;
                    _productType1 = value;
                    FixupProductType1(previousValue);
                    OnNavigationPropertyChanged("ProductType1");
                }
            }
        }
        private ProductType _productType1;
    
        [DataMember]
        public ProductType ProductType2
        {
            get { return _productType2; }
            set
            {
                if (!ReferenceEquals(_productType2, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // 这是识别关系的依赖端，因此主体端在设置后不能更改，
                        // 否则它只能设置为主键值与依赖外键相同的实体。
                        if (id != value.id)
                        {
                            throw new InvalidOperationException("仅当依赖端处于“已添加”状态时，才能更改识别关系的主体端。");
                        }
                    }
                    var previousValue = _productType2;
                    _productType2 = value;
                    FixupProductType2(previousValue);
                    OnNavigationPropertyChanged("ProductType2");
                }
            }
        }
        private ProductType _productType2;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // 此实体类型是至少一个执行级联删除的关联中的依赖端。
        // 此事件处理程序将处理在删除主体端时发生的通知。
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Product.Clear();
            ProductGoodsRelationship.Clear();
            ProductType1 = null;
            ProductType2 = null;
        }

        #endregion

        #region 关联修复
    
        private void FixupProductType1(ProductType previousValue)
        {
            // 这是执行级联删除的关联中的主体端。
            // 更新事件侦听器以引用新依赖。
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (ProductType1 != null)
            {
                ChangeTracker.ObjectStateChanging += ProductType1.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProductType2, this))
            {
                previousValue.ProductType2 = null;
            }
    
            if (ProductType1 != null)
            {
                ProductType1.ProductType2 = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProductType1")
                    && (ChangeTracker.OriginalValues["ProductType1"] == ProductType1))
                {
                    ChangeTracker.OriginalValues.Remove("ProductType1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProductType1", previousValue);
                    // 这是识别关联的主体端，因此在移除关系时必须删除依赖。
                    // 如果依赖的当前状态为“已添加”，则可以更改关系而不会导致删除依赖。
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (ProductType1 != null && !ProductType1.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProductType1.StartTracking();
                }
            }
        }
    
        private void FixupProductType2(ProductType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.ProductType1, this))
            {
                previousValue.ProductType1 = null;
            }
    
            if (ProductType2 != null)
            {
                ProductType2.ProductType1 = this;
                id = ProductType2.id;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProductType2")
                    && (ChangeTracker.OriginalValues["ProductType2"] == ProductType2))
                {
                    ChangeTracker.OriginalValues.Remove("ProductType2");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProductType2", previousValue);
                }
                if (ProductType2 != null && !ProductType2.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProductType2.StartTracking();
                }
            }
        }
    
        private void FixupProduct(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.ProductType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Product", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductType, this))
                    {
                        item.ProductType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Product", item);
                    }
                }
            }
        }
    
        private void FixupProductGoodsRelationship(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductGoodsRelationship item in e.NewItems)
                {
                    item.ProductType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductGoodsRelationship", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductGoodsRelationship item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProductType, this))
                    {
                        item.ProductType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductGoodsRelationship", item);
                    }
                }
            }
        }

        #endregion

    }
}
